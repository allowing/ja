{"version":3,"sources":["component/HeaderComponent.js","component/FooterComponent.js","component/Home.js","component/Editor.js","component/Doc.js","component/About.js","component/App.js","serviceWorker.js","index.js"],"names":["HeaderComponent","react_default","a","createElement","className","Link","to","Component","FooterComponent","Home","observer","Fragment","HeaderComponent_HeaderComponent","FooterComponent_FooterComponent","Editor","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","myRef","React","createRef","window","MonacoEnvironment","getWorkerUrl","moduleId","label","concat","process","monaco","create","current","value","join","language","ref","Doc","Editor_Editor","About","App","HashRouter","Route","exact","path","component","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","App_App","document","getElementById","URL","origin","addEventListener","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.09ae8367.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nexport default class HeaderComponent extends Component {\r\n    render() {\r\n        return (\r\n            <header>\r\n                <ul className=\"HeaderComponent-nav\">\r\n                    <li className=\"HeaderComponent-nav-item\"><Link className=\"HeaderComponent-nav-item-a\" to=\"/\">首页</Link></li>\r\n                    <li className=\"HeaderComponent-nav-item\"><Link className=\"HeaderComponent-nav-item-a\" to=\"/doc\">教案</Link></li>\r\n                    <li className=\"HeaderComponent-nav-item\"><Link className=\"HeaderComponent-nav-item-a\" to=\"/about\">关于我们</Link></li>\r\n                </ul>\r\n            </header>\r\n        );\r\n    }\r\n}\r\n","import React, { Component } from 'react';\r\n\r\nexport default class FooterComponent extends Component {\r\n    render() {\r\n        return (\r\n            <footer>\r\n                <p className=\"FooterComponent-copy\">&copy;&nbsp;2018&nbsp;广州思籁教育科技有限公司</p>\r\n            </footer>\r\n        );\r\n    }\r\n}\r\n","import React, { Component } from 'react';\r\nimport { observer } from 'mobx-react';\r\nimport HeaderComponent from './HeaderComponent';\r\nimport FooterComponent from './FooterComponent';\r\n\r\nexport default @observer class Home extends Component {\r\n    render() {\r\n        return (\r\n            <>\r\n                <HeaderComponent />\r\n                <FooterComponent />\r\n            </>\r\n        );\r\n    }\r\n}\r\n","import React, { Component } from 'react';\r\nimport { observer } from 'mobx-react';\r\nimport * as monaco from 'monaco-editor';\r\n\r\nexport default @observer class Editor extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.myRef = React.createRef();\r\n    }\r\n\r\n    componentDidMount() {\r\n        window.MonacoEnvironment = {\r\n            getWorkerUrl(moduleId, label) {\r\n                return `${process.env.PUBLIC_URL}/service-worker.js`;\r\n            },\r\n        };\r\n\r\n        monaco.editor.create(this.myRef.current, {\r\n            value: [\r\n                'function x() {',\r\n                '\\tconsole.log(\"Hello world!\");',\r\n                '}'\r\n            ].join('\\n'),\r\n            language: 'javascript',\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"Editor\" ref={this.myRef}>\r\n\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React, { Component } from 'react';\r\nimport { observer } from 'mobx-react';\r\nimport HeaderComponent from './HeaderComponent';\r\nimport FooterComponent from './FooterComponent';\r\nimport Editor from './Editor';\r\n\r\nexport default @observer class Doc extends Component {\r\n    render() {\r\n        return (\r\n            <>\r\n                <HeaderComponent />\r\n                <Editor />\r\n                <FooterComponent />\r\n            </>\r\n        );\r\n    }\r\n}\r\n","import React, { Component } from 'react';\r\nimport { observer } from 'mobx-react';\r\nimport HeaderComponent from './HeaderComponent';\r\nimport FooterComponent from './FooterComponent';\r\n\r\nexport default @observer class About extends Component {\r\n    render() {\r\n        return (\r\n            <>\r\n                <HeaderComponent />\r\n                <FooterComponent />\r\n            </>\r\n        );\r\n    }\r\n}\r\n","import React, { Component } from 'react';\nimport { HashRouter as Router, Route } from 'react-router-dom';\nimport Home from './Home';\nimport Doc from './Doc';\nimport About from './About';\n\nexport default class App extends Component {\n    render() {\n        return (\n            <Router>\n                <>\n                    <Route exact path=\"/\" component={Home} />\n                    <Route path=\"/doc\" component={Doc} />\n                    <Route path=\"/about\" component={About} />\n                </>\n            </Router>\n        );\n    }\n}\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './component/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}